services:
  postgres:
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}

    image: "${POSTGRES_IMAGE}"
    container_name: "${POSTGRES_CONTAINER}"
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s
  backend:
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    build: ../backend
    container_name: "${BACKEND_CONTAINER}"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:3000"
    networks:
      - "${NETWORK}"
    restart: always
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/status"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s

  nginx:
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      NGINX_PORT: ${NGINX_PORT}
    image: nginx:latest
    container_name: "${NGINX_CONTAINER}"
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/index.html:/usr/share/nginx/html/index.html:ro
    networks:
      - "${NETWORK}"
    restart: always

networks:
  backend_network:
    driver: bridge

