- name: Lade `.env`-Datei als Text
  slurp:
    src: "{{ playbook_dir }}/../deployment/.env"
  register: raw_env_file

- name: Konvertiere `.env` in ein Dictionary
  set_fact:
    env_vars: "{{ dict(raw_env_file['content'] | b64decode | split('\n') | reject('match', '^#|^$') | map('split', '=', 1) | list) }}"

- name: Debug - Überprüfe `.env`-Variablen
  debug:
    var: env_vars

- name: Ensure Nginx container and network variables are set
  set_fact:
    nginx_container: "{{ env_vars.NGINX_CONTAINER | default('nginx_container') }}"
    nginx_image: "{{ env_vars.NGINX_IMAGE | default('nginx:latest') }}"
    nginx_port: "{{ env_vars.NGINX_PORT | default(8080) }}"
    backend_network: "{{ env_vars.NETWORK | default('backend_network') }}"
    backend_container: "{{ env_vars.BACKEND_CONTAINER | default('backend_container') }}"
    backend_port: "{{ env_vars.BACKEND_PORT | default(3000) }}"

- name: Ensure Docker network exists
  docker_network:
    name: "{{ backend_network }}"
    state: present

- name: Remove existing Nginx container (if running)
  docker_container:
    name: "{{ nginx_container }}"
    state: absent
  ignore_errors: yes

- name: Run Nginx Container
  community.docker.docker_container:
    name: "{{ nginx_container }}"
    image: "{{ nginx_image }}"
    state: started
    restart_policy: always
    ports:
      - "{{ nginx_port }}:80"
    volumes:
      - "{{ playbook_dir }}/../nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "{{ playbook_dir }}/../nginx/index.html:/usr/share/nginx/html/index.html:ro"
    networks:
      - name: "{{ backend_network }}"
  register: nginx_status

- name: Wait for Nginx to be ready
  wait_for:
    host: "localhost"
    port: "{{ nginx_port }}"
    timeout: 30
  when: nginx_status.changed
