- name: Lade `.env`-Datei als Text
  slurp:
    src: "{{ playbook_dir }}/../deployment/.env"
  register: raw_env_file

- name: Konvertiere `.env` in ein Dictionary
  set_fact:
    env_vars: "{{ dict(raw_env_file['content'] | b64decode | split('\n') | reject('match', '^#|^$') | map('split', '=', 1) | list) }}"

- name: Debug - Überprüfe `.env`-Variablen
  debug:
    var: env_vars

- name: Ensure backend and network variables are set
  set_fact:
    backend_image: "{{ env_vars.BACKEND_IMAGE | default('backend_image') }}"
    backend_container: "{{ env_vars.BACKEND_CONTAINER | default('backend_container') }}"
    backend_port: "{{ env_vars.BACKEND_PORT | default(3000) }}"
    postgres_container: "{{ env_vars.POSTGRES_CONTAINER | default('postgres_container') }}"
    postgres_port: "{{ env_vars.POSTGRES_PORT | default(5432) }}"
    network: "{{ env_vars.NETWORK | default('backend_network') }}"

- name: Ensure Docker network exists
  docker_network:
    name: "{{ network }}"
    state: present

- name: Warte, bis PostgreSQL bereit ist
  community.postgresql.postgresql_ping:
    login_host: "localhost"
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    db: "{{ postgres_db }}"
  register: pg_health
  retries: 10
  delay: 10
  until: pg_health.is_available

- name: Build Backend Docker Image
  docker_image:
    name: "{{ backend_image }}"
    build:
      path: "{{ playbook_dir }}/../backend"
    source: build
  register: backend_build

- name: Remove existing backend container (if running)
  docker_container:
    name: "{{ backend_container }}"
    state: absent
  when: backend_build.changed

- name: Run Backend Container
  docker_container:
    name: "{{ backend_container }}"
    image: "{{ backend_image }}"
    state: started
    restart_policy: always
    ports:
      - "{{ backend_port }}:3000"
    env_file: "{{ playbook_dir }}/../deployment/.env"
    networks:
      - name: "{{ network }}"
  register: backend_status

- name: Überprüfe den Backend-Status
  uri:
    url: "http://localhost:3000/api/users"
    method: GET
    status_code: 200
    timeout: 10  # Setzt das Timeout für die HTTP-Anfrage
  register: backend_status
  retries: 10  # Anzahl der Wiederholungsversuche
  delay: 5  # Zeit in Sekunden zwischen den Versuchen
  until: backend_status is defined and backend_status.status == 200

- name: Debug Backend-Status (im Fehlerfall)
  debug:
    var: backend_status
  failed_when: backend_status is not defined or backend_status.status != 200



- name: Wait for Backend API
  wait_for:
    host: "{{ backend_container }}"
    port: "{{ backend_port }}"
    timeout: 30
  when: backend_status.changed
